// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dock_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace DockService {
  public static partial class DockService
  {
    static readonly string __ServiceName = "dock_service.DockService";

    static readonly grpc::Marshaller<global::DockService.TestMessage> __Marshaller_dock_service_TestMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.TestMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.ConnectRequest> __Marshaller_dock_service_ConnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.ConnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.ConnectResponse> __Marshaller_dock_service_ConnectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.ConnectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.GameMessage> __Marshaller_dock_service_GameMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.GameMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.ClientResponse> __Marshaller_dock_service_ClientResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.ClientResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.ServerRequest> __Marshaller_dock_service_ServerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.ServerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.LoginRequest> __Marshaller_dock_service_LoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.LoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.LoginResponse> __Marshaller_dock_service_LoginResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.LoginResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.RegisterRequest> __Marshaller_dock_service_RegisterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.RegisterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.RegisterResponse> __Marshaller_dock_service_RegisterResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.RegisterResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.MatchRequest> __Marshaller_dock_service_MatchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.MatchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.MatchResponse> __Marshaller_dock_service_MatchResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.MatchResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.GetUserInfoRequest> __Marshaller_dock_service_GetUserInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.GetUserInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DockService.GetUserInfoResponse> __Marshaller_dock_service_GetUserInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DockService.GetUserInfoResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::DockService.TestMessage, global::DockService.TestMessage> __Method_ConnectTest = new grpc::Method<global::DockService.TestMessage, global::DockService.TestMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConnectTest",
        __Marshaller_dock_service_TestMessage,
        __Marshaller_dock_service_TestMessage);

    static readonly grpc::Method<global::DockService.ConnectRequest, global::DockService.ConnectResponse> __Method_Connect = new grpc::Method<global::DockService.ConnectRequest, global::DockService.ConnectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_dock_service_ConnectRequest,
        __Marshaller_dock_service_ConnectResponse);

    static readonly grpc::Method<global::DockService.GameMessage, global::DockService.ClientResponse> __Method_Client2Server = new grpc::Method<global::DockService.GameMessage, global::DockService.ClientResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Client2Server",
        __Marshaller_dock_service_GameMessage,
        __Marshaller_dock_service_ClientResponse);

    static readonly grpc::Method<global::DockService.ServerRequest, global::DockService.GameMessage> __Method_Server2Client = new grpc::Method<global::DockService.ServerRequest, global::DockService.GameMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Server2Client",
        __Marshaller_dock_service_ServerRequest,
        __Marshaller_dock_service_GameMessage);

    static readonly grpc::Method<global::DockService.LoginRequest, global::DockService.LoginResponse> __Method_LoginAccount = new grpc::Method<global::DockService.LoginRequest, global::DockService.LoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LoginAccount",
        __Marshaller_dock_service_LoginRequest,
        __Marshaller_dock_service_LoginResponse);

    static readonly grpc::Method<global::DockService.RegisterRequest, global::DockService.RegisterResponse> __Method_RegisterAccount = new grpc::Method<global::DockService.RegisterRequest, global::DockService.RegisterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterAccount",
        __Marshaller_dock_service_RegisterRequest,
        __Marshaller_dock_service_RegisterResponse);

    static readonly grpc::Method<global::DockService.MatchRequest, global::DockService.MatchResponse> __Method_MatchGameRoom = new grpc::Method<global::DockService.MatchRequest, global::DockService.MatchResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "MatchGameRoom",
        __Marshaller_dock_service_MatchRequest,
        __Marshaller_dock_service_MatchResponse);

    static readonly grpc::Method<global::DockService.MatchRequest, global::DockService.MatchResponse> __Method_CancelMatching = new grpc::Method<global::DockService.MatchRequest, global::DockService.MatchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelMatching",
        __Marshaller_dock_service_MatchRequest,
        __Marshaller_dock_service_MatchResponse);

    static readonly grpc::Method<global::DockService.GetUserInfoRequest, global::DockService.GetUserInfoResponse> __Method_GetUserInfo = new grpc::Method<global::DockService.GetUserInfoRequest, global::DockService.GetUserInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserInfo",
        __Marshaller_dock_service_GetUserInfoRequest,
        __Marshaller_dock_service_GetUserInfoResponse);

    static readonly grpc::Method<global::DockService.GameMessage, global::DockService.GameMessage> __Method_GameMessageStream = new grpc::Method<global::DockService.GameMessage, global::DockService.GameMessage>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GameMessageStream",
        __Marshaller_dock_service_GameMessage,
        __Marshaller_dock_service_GameMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::DockService.DockServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DockService</summary>
    [grpc::BindServiceMethod(typeof(DockService), "BindService")]
    public abstract partial class DockServiceBase
    {
      /// <summary>
      /// Connect
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::DockService.TestMessage> ConnectTest(global::DockService.TestMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Connect
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::DockService.ConnectResponse> Connect(global::DockService.ConnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Game
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::DockService.ClientResponse> Client2Server(global::DockService.GameMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Game
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Server2Client(global::DockService.ServerRequest request, grpc::IServerStreamWriter<global::DockService.GameMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DockService.LoginResponse> LoginAccount(global::DockService.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DockService.RegisterResponse> RegisterAccount(global::DockService.RegisterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task MatchGameRoom(global::DockService.MatchRequest request, grpc::IServerStreamWriter<global::DockService.MatchResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DockService.MatchResponse> CancelMatching(global::DockService.MatchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DockService.GetUserInfoResponse> GetUserInfo(global::DockService.GetUserInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GameMessageStream(grpc::IAsyncStreamReader<global::DockService.GameMessage> requestStream, grpc::IServerStreamWriter<global::DockService.GameMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DockService</summary>
    public partial class DockServiceClient : grpc::ClientBase<DockServiceClient>
    {
      /// <summary>Creates a new client for DockService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DockServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DockService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DockServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DockServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DockServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Connect
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DockService.TestMessage ConnectTest(global::DockService.TestMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectTest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Connect
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DockService.TestMessage ConnectTest(global::DockService.TestMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConnectTest, null, options, request);
      }
      /// <summary>
      /// Connect
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DockService.TestMessage> ConnectTestAsync(global::DockService.TestMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectTestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Connect
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DockService.TestMessage> ConnectTestAsync(global::DockService.TestMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConnectTest, null, options, request);
      }
      /// <summary>
      /// Connect
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DockService.ConnectResponse Connect(global::DockService.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Connect
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DockService.ConnectResponse Connect(global::DockService.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      /// Connect
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DockService.ConnectResponse> ConnectAsync(global::DockService.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Connect
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DockService.ConnectResponse> ConnectAsync(global::DockService.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      /// Game
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DockService.ClientResponse Client2Server(global::DockService.GameMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Client2Server(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Game
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DockService.ClientResponse Client2Server(global::DockService.GameMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Client2Server, null, options, request);
      }
      /// <summary>
      /// Game
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DockService.ClientResponse> Client2ServerAsync(global::DockService.GameMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Client2ServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Game
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DockService.ClientResponse> Client2ServerAsync(global::DockService.GameMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Client2Server, null, options, request);
      }
      /// <summary>
      /// Game
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::DockService.GameMessage> Server2Client(global::DockService.ServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Server2Client(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Game
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::DockService.GameMessage> Server2Client(global::DockService.ServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Server2Client, null, options, request);
      }
      public virtual global::DockService.LoginResponse LoginAccount(global::DockService.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DockService.LoginResponse LoginAccount(global::DockService.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoginAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DockService.LoginResponse> LoginAccountAsync(global::DockService.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DockService.LoginResponse> LoginAccountAsync(global::DockService.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoginAccount, null, options, request);
      }
      public virtual global::DockService.RegisterResponse RegisterAccount(global::DockService.RegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DockService.RegisterResponse RegisterAccount(global::DockService.RegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DockService.RegisterResponse> RegisterAccountAsync(global::DockService.RegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DockService.RegisterResponse> RegisterAccountAsync(global::DockService.RegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterAccount, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::DockService.MatchResponse> MatchGameRoom(global::DockService.MatchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MatchGameRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::DockService.MatchResponse> MatchGameRoom(global::DockService.MatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_MatchGameRoom, null, options, request);
      }
      public virtual global::DockService.MatchResponse CancelMatching(global::DockService.MatchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelMatching(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DockService.MatchResponse CancelMatching(global::DockService.MatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelMatching, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DockService.MatchResponse> CancelMatchingAsync(global::DockService.MatchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelMatchingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DockService.MatchResponse> CancelMatchingAsync(global::DockService.MatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelMatching, null, options, request);
      }
      public virtual global::DockService.GetUserInfoResponse GetUserInfo(global::DockService.GetUserInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DockService.GetUserInfoResponse GetUserInfo(global::DockService.GetUserInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DockService.GetUserInfoResponse> GetUserInfoAsync(global::DockService.GetUserInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DockService.GetUserInfoResponse> GetUserInfoAsync(global::DockService.GetUserInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserInfo, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::DockService.GameMessage, global::DockService.GameMessage> GameMessageStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GameMessageStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::DockService.GameMessage, global::DockService.GameMessage> GameMessageStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GameMessageStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DockServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DockServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DockServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ConnectTest, serviceImpl.ConnectTest)
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_Client2Server, serviceImpl.Client2Server)
          .AddMethod(__Method_Server2Client, serviceImpl.Server2Client)
          .AddMethod(__Method_LoginAccount, serviceImpl.LoginAccount)
          .AddMethod(__Method_RegisterAccount, serviceImpl.RegisterAccount)
          .AddMethod(__Method_MatchGameRoom, serviceImpl.MatchGameRoom)
          .AddMethod(__Method_CancelMatching, serviceImpl.CancelMatching)
          .AddMethod(__Method_GetUserInfo, serviceImpl.GetUserInfo)
          .AddMethod(__Method_GameMessageStream, serviceImpl.GameMessageStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DockServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ConnectTest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DockService.TestMessage, global::DockService.TestMessage>(serviceImpl.ConnectTest));
      serviceBinder.AddMethod(__Method_Connect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DockService.ConnectRequest, global::DockService.ConnectResponse>(serviceImpl.Connect));
      serviceBinder.AddMethod(__Method_Client2Server, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DockService.GameMessage, global::DockService.ClientResponse>(serviceImpl.Client2Server));
      serviceBinder.AddMethod(__Method_Server2Client, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::DockService.ServerRequest, global::DockService.GameMessage>(serviceImpl.Server2Client));
      serviceBinder.AddMethod(__Method_LoginAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DockService.LoginRequest, global::DockService.LoginResponse>(serviceImpl.LoginAccount));
      serviceBinder.AddMethod(__Method_RegisterAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DockService.RegisterRequest, global::DockService.RegisterResponse>(serviceImpl.RegisterAccount));
      serviceBinder.AddMethod(__Method_MatchGameRoom, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::DockService.MatchRequest, global::DockService.MatchResponse>(serviceImpl.MatchGameRoom));
      serviceBinder.AddMethod(__Method_CancelMatching, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DockService.MatchRequest, global::DockService.MatchResponse>(serviceImpl.CancelMatching));
      serviceBinder.AddMethod(__Method_GetUserInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DockService.GetUserInfoRequest, global::DockService.GetUserInfoResponse>(serviceImpl.GetUserInfo));
      serviceBinder.AddMethod(__Method_GameMessageStream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::DockService.GameMessage, global::DockService.GameMessage>(serviceImpl.GameMessageStream));
    }

  }
}
#endregion
